-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

-- Player References
local LP = Players.LocalPlayer

-- Kill System Variables
local killingConnection
_G.fastHitActive = false
local whitelist = {}
local isHitting = false

-- Anti-AFK
game:GetService("Players").LocalPlayer.Idled:Connect(function()
	game:GetService("VirtualUser"):CaptureController()
	game:GetService("VirtualUser"):ClickButton1(Vector2.new())
	game:GetService("VirtualUser"):ClickButton2(Vector2.new())
end)

-- GUI Settings
local GuiVisible = true

-- Platform Variables
local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, - 9.5, -2)
local numberOfParts = math.ceil(totalDistance / partSize)
local rockOriginal
local rockSize
local rockConnection


local function createParts()
	for x = 0, numberOfParts - 1 do
		for z = 0, numberOfParts - 1 do
            -- Create parts side to side
			local newPartSide = Instance.new("Part")
			newPartSide.Size = Vector3.new(partSize, 1, partSize)
			newPartSide.Position = startPosition + Vector3.new(x * partSize, 0, z * partSize)
			newPartSide.Anchored = true
			newPartSide.Transparency = 1
			newPartSide.CanCollide = true
			newPartSide.Name = "Part_Side_" .. x .. "_" .. z
			newPartSide.Parent = workspace
			table.insert(parts, newPartSide)

            -- Create parts left to right
			local newPartLeftRight = Instance.new("Part")
			newPartLeftRight.Size = Vector3.new(partSize, 1, partSize)
			newPartLeftRight.Position = startPosition + Vector3.new(- x * partSize, 0, z * partSize)
			newPartLeftRight.Anchored = true
			newPartLeftRight.Transparency = 1
			newPartLeftRight.CanCollide = true
			newPartLeftRight.Name = "Part_LeftRight_" .. x .. "_" .. z
			newPartLeftRight.Parent = workspace
			table.insert(parts, newPartLeftRight)

            -- Create parts diagonally (upleft and upright)
			local newPartUpLeft = Instance.new("Part")
			newPartUpLeft.Size = Vector3.new(partSize, 1, partSize)
			newPartUpLeft.Position = startPosition + Vector3.new(- x * partSize, 0, - z * partSize)
			newPartUpLeft.Anchored = true
			newPartUpLeft.Transparency = 1
			newPartUpLeft.CanCollide = true
			newPartUpLeft.Name = "Part_UpLeft_" .. x .. "_" .. z
			newPartUpLeft.Parent = workspace
			table.insert(parts, newPartUpLeft)
			local newPartUpRight = Instance.new("Part")
			newPartUpRight.Size = Vector3.new(partSize, 1, partSize)
			newPartUpRight.Position = startPosition + Vector3.new(x * partSize, 0, - z * partSize)
			newPartUpRight.Anchored = true
			newPartUpRight.Transparency = 1
			newPartUpRight.CanCollide = true
			newPartUpRight.Name = "Part_UpRight_" .. x .. "_" .. z
			newPartUpRight.Parent = workspace
			table.insert(parts, newPartUpRight)
		end
	end
end

local function makePartsWalkthrough()
	for _, part in ipairs(parts) do
		if part and part.Parent then
			part.CanCollide = false
		end
	end
end

local function makePartsSolid()
	for _, part in ipairs(parts) do
		if part and part.Parent then
			part.CanCollide = true
		end
	end
end

local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
local Window = Library:CreateWindow{
	Title = "2426627234",
	SubTitle = "By Masterboy123",
	TabWidth = 125,
	Size = UDim2.fromOffset(830, 525),
	Resize = true,
	MinSize = Vector2.new(470, 380),
	Acrylic = true,
	Theme = "VSC Dark High Contrast",
	MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
	Main = Window:CreateTab{
		Title = "Main",
		Icon = "phosphor-house-bold"
	},
	AutoFarm = Window:CreateTab{
		Title = "Auto Farm",
		Icon = "phosphor-robot-bold"
	},
	Rock = Window:CreateTab{
		Title = "Rock",
		Icon = "phosphor-mountains-bold"
	},
	Workouts = Window:CreateTab{
		Title = "Auto Workout",
		Icon = "phosphor-robot-bold"
	},
	Rebirth = Window:CreateTab{
		Title = "Rebirth",
		Icon = "phosphor-arrows-clockwise-bold"
	},
	Killer = Window:CreateTab{
		Title = "Killer",
		Icon = "phosphor-sword-bold"
	},
	Crystals = Window:CreateTab{
		Title = "Crystals",
		Icon = "phosphor-diamond-bold"
	},
	Teleport = Window:CreateTab{
		Title = "Teleport",
		Icon = "phosphor-dog-bold"
	},
	Stats = Window:CreateTab{
		Title = "Stats",
		Icon = "phosphor-sparkle-bold"
	},
	Misc = Window:CreateTab{
		Title = "Misc",
		Icon = "phosphor-map-pin-bold"
	},
	Settings = Window:CreateTab{
		Title = "Settings",
		Icon = "phosphor-sliders-bold"
	}
}
local Options = Library.Options  




local MainSection = Tabs.Main:CreateSection("Basic Controls")

local selectedSize = "2"

local Input = Tabs.Main:CreateInput("SizeChanger", {
	Title = "Size Changer",
	Description = "Enter Size",
	Default = "2",
	Placeholder = "Type here...",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		selectedSize = Value
		if _G.AutoSize then
			game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
		end
	end
})

local Toggle = Tabs.Main:CreateToggle("AutoSize", {
	Title = "Auto Set Size",
	Description = "Auto Set ur Choosed Size",
	Default = false,
	Callback = function(Value)
		_G.AutoSize = Value
		while _G.AutoSize do
			game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
			task.wait(0.1)
		end
	end
})

local selectedSpeed = "125"

local Input = Tabs.Main:CreateInput("SpeedChanger", {
	Title = "Speed Changer",
	Description = "Enter Speed",
	Default = "125",
	Placeholder = "Enter Speed",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		selectedSpeed = Value
		if _G.AutoSpeed then
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(selectedSpeed)
			end
		end
	end
})

local Toggle = Tabs.Main:CreateToggle("AutoSpeed", {
	Title = "Auto Set Speed",
	Description = "Auto Set ur Choosed Speed",
	Default = false,
	Callback = function(Value)
		_G.AutoSpeed = Value
		while _G.AutoSpeed do
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
				game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(selectedSpeed)
			end
			task.wait()
		end
	end
})

game.Players.LocalPlayer.CharacterAdded:Connect(function(char)
	if _G.AutoSpeed then
		local humanoid = char:WaitForChild("Humanoid")
		humanoid.WalkSpeed = tonumber(selectedSpeed)
	end
end)


Tabs.Main:CreateButton{
	Title = "Free AutoLift Gamepass",
	Callback = function()
		local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
		local player = game:GetService("Players").LocalPlayer
		for _, gamepass in pairs(gamepassFolder:GetChildren()) do
			local value = Instance.new("IntValue")
			value.Name = gamepass.Name
			value.Value = gamepass.Value
			value.Parent = player.ownedGamepasses
		end
	end
}

local Toggle = Tabs.Main:CreateToggle("WalkOnWater", {
	Title = "Walk on Water",
	Description = "Toggle Description", -- Optional
	Default = false,
	Callback = function(Value)
		if Value then
			createParts()
		else
			makePartsWalkthrough()
		end
	end
})

Tabs.Main:CreateButton{
	Title = "Anti-Afk",
	Callback = function()
		local ScreenGui = Instance.new("ScreenGui")
		local MainFrame = Instance.new("Frame")
		local TopBar = Instance.new("Frame")
		local Title = Instance.new("TextLabel")
		local MinimizeBtn = Instance.new("TextButton")
		local CloseBtn = Instance.new("TextButton")
		local StatusFrame = Instance.new("Frame")
		local Status = Instance.new("TextLabel")
		local TimeFrame = Instance.new("Frame")
		local TimeLabel = Instance.new("TextLabel")
		local PingLabel = Instance.new("TextLabel")
		local CreatorLabel = Instance.new("TextLabel")

        -- GUI Setup
		ScreenGui.Parent = game.CoreGui
		ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		MainFrame.Name = "MainFrame"
		MainFrame.Parent = ScreenGui
		MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		MainFrame.BorderColor3 = Color3.fromRGB(0, 255, 0)
		MainFrame.Position = UDim2.new(0.8, 0, 0.1, 0)
		MainFrame.Size = UDim2.new(0, 200, 0, 120)
		MainFrame.Active = true
		MainFrame.Draggable = true
		TopBar.Name = "TopBar"
		TopBar.Parent = MainFrame
		TopBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		TopBar.Size = UDim2.new(1, 0, 0, 25)
		Title.Parent = TopBar
		Title.BackgroundTransparency = 1
		Title.Position = UDim2.new(0, 5, 0, 0)
		Title.Size = UDim2.new(0.7, 0, 1, 0)
		Title.Font = Enum.Font.Code
		Title.Text = "Anti-AFK Panel"
		Title.TextColor3 = Color3.fromRGB(0, 255, 0)
		Title.TextSize = 14
		Title.TextXAlignment = Enum.TextXAlignment.Left
		MinimizeBtn.Parent = TopBar
		MinimizeBtn.BackgroundTransparency = 1
		MinimizeBtn.Position = UDim2.new(0.8, 0, 0, 0)
		MinimizeBtn.Size = UDim2.new(0, 25, 1, 0)
		MinimizeBtn.Font = Enum.Font.Code
		MinimizeBtn.Text = "-"
		MinimizeBtn.TextColor3 = Color3.fromRGB(0, 255, 0)
		MinimizeBtn.TextSize = 20
		CloseBtn.Parent = TopBar
		CloseBtn.BackgroundTransparency = 1
		CloseBtn.Position = UDim2.new(0.9, 0, 0, 0)
		CloseBtn.Size = UDim2.new(0, 25, 1, 0)
		CloseBtn.Font = Enum.Font.Code
		CloseBtn.Text = "X"
		CloseBtn.TextColor3 = Color3.fromRGB(255, 0, 0)
		CloseBtn.TextSize = 14
		StatusFrame.Name = "StatusFrame"
		StatusFrame.Parent = MainFrame
		StatusFrame.BackgroundTransparency = 1
		StatusFrame.Position = UDim2.new(0, 0, 0.3, 0)
		StatusFrame.Size = UDim2.new(1, 0, 0.7, 0)
		TimeLabel.Parent = StatusFrame
		TimeLabel.BackgroundTransparency = 1
		TimeLabel.Position = UDim2.new(0, 5, 0, 0)
		TimeLabel.Size = UDim2.new(1, -10, 0, 20)
		TimeLabel.Font = Enum.Font.Code
		TimeLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
		TimeLabel.TextSize = 14
		TimeLabel.TextXAlignment = Enum.TextXAlignment.Left
		PingLabel.Parent = StatusFrame
		PingLabel.BackgroundTransparency = 1
		PingLabel.Position = UDim2.new(0, 5, 0, 25)
		PingLabel.Size = UDim2.new(1, -10, 0, 20)
		PingLabel.Font = Enum.Font.Code
		PingLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
		PingLabel.TextSize = 14
		PingLabel.TextXAlignment = Enum.TextXAlignment.Left
		CreatorLabel.Parent = StatusFrame
		CreatorLabel.BackgroundTransparency = 1
		CreatorLabel.Position = UDim2.new(0, 5, 0, 50)
		CreatorLabel.Size = UDim2.new(1, -10, 0, 20)
		CreatorLabel.Font = Enum.Font.Code
		CreatorLabel.Text = "Creator: masterboy123"
		CreatorLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
		CreatorLabel.TextSize = 14
		CreatorLabel.TextXAlignment = Enum.TextXAlignment.Left

        -- Functionality
		local startTime = tick()
		local minimized = false
		spawn(function()
			while wait(1) do
				local elapsed = tick() - startTime
				local hours = math.floor(elapsed / 3600)
				local minutes = math.floor((elapsed % 3600) / 60)
				local seconds = math.floor(elapsed % 60)
				TimeLabel.Text = string.format("Time: %02d:%02d:%02d", hours, minutes, seconds)
				PingLabel.Text = string.format("Ping: %d ms", math.round(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()))
			end
		end)
		MinimizeBtn.MouseButton1Click:Connect(function()
			minimized = not minimized
			StatusFrame.Visible = not minimized
			MainFrame.Size = minimized and UDim2.new(0, 200, 0, 25) or UDim2.new(0, 200, 0, 120)
		end)
		CloseBtn.MouseButton1Click:Connect(function()
			ScreenGui:Destroy()
		end)
		local VirtualUser = game:GetService('VirtualUser')
		game:GetService('Players').LocalPlayer.Idled:Connect(function()
			VirtualUser:CaptureController()
			VirtualUser:ClickButton2(Vector2.new())
		end)
	end
}

local letterMap = {
	a = "ạ̲",
	b = "ḅ̲",
	c = "с̲",
	d = "ḍ̲",
	e = "ẹ̲",
	f = "f̲",
	g = "ɡ̲",
	h = "ḥ̲",
	i = "ị̲",
	j = "ј̲",
	k = "ḳ̲",
	l = "ḷ̲",
	m = "ṃ̲",
	n = "ṇ̲",
	o = "ọ̲",
	p = "р̲",
	q = "q̲",
	r = "ṛ̲",
	s = "ṣ̲",
	t = "ṭ̲",
	u = "ụ̲",
	v = "ṿ̲",
	w = "ẉ̲",
	x = "х̲",
	y = "ỵ̲",
	z = "ẓ̲"
}

local InputValue = ""
local SpecialInput = Tabs.Main:CreateInput("SpecialChat", {
	Title = "Text Input",
	Default = "",
	Placeholder = "Type here...",
	Finished = true,
	Callback = function(Value)
		InputValue = Value
		local convertedText = Value:lower():gsub(".", letterMap)
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(convertedText, "All")
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Weight", {
	Title = "Auto Weight",
	Description = "Auto Lift Weight",
	Default = false,
	Callback = function(Value)
		_G.AutoWeight = Value
		if Value then
			local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
			if weightTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(weightTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Weight")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoWeight do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Pushups", {
	Title = "Auto Pushups",
	Description = "Auto Lift Pushups",
	Default = false,
	Callback = function(Value)
		_G.AutoPushups = Value
		if Value then
			local pushupsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Pushups")
			if pushupsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(pushupsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Pushups")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoPushups do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Handstands", {
	Title = "Auto Handstands",
	Description = "Auto Lift Handstands",
	Default = false,
	Callback = function(Value)
		_G.AutoHandstands = Value
		if Value then
			local handstandsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Handstands")
			if handstandsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(handstandsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Handstands")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoHandstands do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Situps", {
	Title = "Auto Situps",
	Description = "Auto Lift Situps",
	Default = false,
	Callback = function(Value)
		_G.AutoSitups = Value
		if Value then
			local situpsTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Situps")
			if situpsTool then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(situpsTool)
			end
		else
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Situps")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
		while _G.AutoSitups do
			game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
			task.wait(0.1)
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("Punch", {
	Title = "Auto Punch",
	Description = "Auto Punch",
	Default = false,
	Callback = function(Value)
		_G.fastHitActive = Value
		if Value then
			local function equipAndModifyPunch()
				while _G.fastHitActive do
					local player = game.Players.LocalPlayer
					local punch = player.Backpack:FindFirstChild("Punch")
					if punch then
						punch.Parent = player.Character
						if punch:FindFirstChild("attackTime") then
							punch.attackTime.Value = 0
						end
					end
					wait(0.1)
				end
			end
			local function rapidPunch()
				while _G.fastHitActive do
					local player = game.Players.LocalPlayer
					player.muscleEvent:FireServer("punch", "rightHand")
					player.muscleEvent:FireServer("punch", "leftHand")
					local character = player.Character
					if character then
						local punchTool = character:FindFirstChild("Punch")
						if punchTool then
							punchTool:Activate()
						end
					end
					wait(0.1)
				end
			end
			coroutine.wrap(equipAndModifyPunch)()
			coroutine.wrap(rapidPunch)()
		else
            -- Unequip punch when toggle is turned off
			local character = game.Players.LocalPlayer.Character
			local equipped = character:FindFirstChild("Punch")
			if equipped then
				equipped.Parent = game.Players.LocalPlayer.Backpack
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("ToolSpeed", {
	Title = "Fast Tools",
	Description = "Fast Tools..., What u didn't get.",
	Default = false,
	Callback = function(Value)
		_G.FastTools = Value
		local defaultSpeeds = {
			{
				"Punch",
				"attackTime",
				Value and 0 or 0.35
			},
			{
				"Ground Slam",
				"attackTime",
				Value and 0 or 6
			},
			{
				"Stomp",
				"attackTime",
				Value and 0 or 7
			},
			{
				"Handstands",
				"repTime",
				Value and 0 or 1
			},
			{
				"Pushups",
				"repTime",
				Value and 0 or 1
			},
			{
				"Weight",
				"repTime",
				Value and 0 or 1
			},
			{
				"Situps",
				"repTime",
				Value and 0 or 1
			}
		}
		local player = game.Players.LocalPlayer
		local backpack = player:WaitForChild("Backpack")
		for _, toolInfo in ipairs(defaultSpeeds) do
            -- Check backpack tools
			local tool = backpack:FindFirstChild(toolInfo[1])
			if tool and tool:FindFirstChild(toolInfo[2]) then
				tool[toolInfo[2]].Value = toolInfo[3]
			end
            
            -- Check equipped tools
			local equippedTool = player.Character and player.Character:FindFirstChild(toolInfo[1])
			if equippedTool and equippedTool:FindFirstChild(toolInfo[2]) then
				equippedTool[toolInfo[2]].Value = toolInfo[3]
			end
		end
	end
})

local RockSection = Tabs.AutoFarm:CreateSection("Rock Farm")

local selectrock = ""

local Toggle = Tabs.AutoFarm:CreateToggle("TinyIslandRock", {
	Title = "Farm Tiny Island Rock",
	Description = "Farm rocks at Tiny Island",
	Default = false,
	Callback = function(Value)
		selectrock = "Tiny Island Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 0 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 0 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("StarterIslandRock", {
	Title = "Farm Starter Island Rock",
	Description = "Farm rocks at Starter Island",
	Default = false,
	Callback = function(Value)
		selectrock = "Starter Island Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 100 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 100 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("LegendBeachRock", {
	Title = "Farm Legend Beach Rock",
	Description = "Farm rocks at Legend Beach",
	Default = false,
	Callback = function(Value)
		selectrock = "Legend Beach Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 5000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 5000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

function gettool()
	for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if v.Name == "Punch" and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
			game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
		end
	end
	game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "leftHand")
	game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch", "rightHand")
end

local Toggle = Tabs.AutoFarm:CreateToggle("FrostGymRock", {
	Title = "Farm Frost Gym Rock",
	Description = "Farm rocks at Frost Gym",
	Default = false,
	Callback = function(Value)
		selectrock = "Frost Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 150000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 150000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("MythicalGymRock", {
	Title = "Farm Mythical Gym Rock",
	Description = "Farm rocks at Mythical Gym",
	Default = false,
	Callback = function(Value)
		selectrock = "Mythical Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 400000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 400000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("EternalGymRock", {
	Title = "Farm Eternal Gym Rock",
	Description = "Farm rocks at Eternal Gym",
	Default = false,
	Callback = function(Value)
		selectrock = "Eternal Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 750000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 750000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("LegendGymRock", {
	Title = "Farm Legend Gym Rock",
	Description = "Farm rocks at Legend Gym",
	Default = false,
	Callback = function(Value)
		selectrock = "Legend Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 1000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 1000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("MuscleKingGymRock", {
	Title = "Farm Muscle King Gym Rock",
	Description = "Farm rocks at Muscle King Gym",
	Default = false,
	Callback = function(Value)
		selectrock = "Muscle King Gym Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 5000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 5000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Toggle = Tabs.AutoFarm:CreateToggle("AncientJungleRock", {
	Title = "Farm Ancient Jungle Rock",
	Description = "Farm rocks at Ancient Jungle",
	Default = false,
	Callback = function(Value)
		selectrock = "Ancient Jungle Rock"
		getgenv().autoFarm = Value
		while getgenv().autoFarm do
			task.wait()
			if game:GetService("Players").LocalPlayer.Durability.Value >= 10000000 then
				for i, v in pairs(game:GetService("Workspace").machinesFolder:GetDescendants()) do
					if v.Name == "neededDurability" and v.Value == 10000000 and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("RightHand") then
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.RightHand, 1)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(v.Parent.Rock, game:GetService("Players").LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
	end
})

local Section = Tabs.Rebirth:CreateSection("AutoRebirth")

-- Initialize variables first
local targetRebirthValue = 1
local initialRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value

-- Stats Display
local Paragraph = Tabs.Rebirth:CreateParagraph("RebirthStats", {
	Title = "Rebirth Statistics",
	Content = "Loading stats...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

-- Update function
local function updateStats()
	local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
	local gained = currentRebirths - initialRebirths
	Paragraph:SetContent(string.format("Target Rebirth: %d\nCurrent Rebirths: %d\nRebirths Gained: %d", targetRebirthValue, currentRebirths, gained))
end

-- Connect the update function
game.Players.LocalPlayer.leaderstats.Rebirths.Changed:Connect(updateStats)
updateStats()


-- Target Input
local targetInput = Tabs.Rebirth:CreateInput("TargetRebirth", {
	Title = "Target Rebirth Amount",
	Description = "Enter your target rebirth goal",
	Default = "1",
	Placeholder = "Enter amount...",
	Numeric = true,
	Finished = true,
	Callback = function(Value)
		targetRebirthValue = tonumber(Value) or 1
		updateStats()
	end
})

-- Target Rebirth Toggle
local targetRebirthLoop = nil
local targetToggle = Tabs.Rebirth:CreateToggle("AutoRebirthTarget", {
	Title = "Auto Rebirth (Target)",
	Description = "Automatically rebirth until target is reached",
	Default = false,
	Callback = function(Value)
		if Value then
			targetRebirthLoop = task.spawn(function()
				while task.wait(0.1) do
					if game.Players.LocalPlayer.leaderstats.Rebirths.Value >= targetRebirthValue then
						targetToggle:SetValue(false)
						break
					end
					game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
				end
			end)
		else
			if targetRebirthLoop then
				task.cancel(targetRebirthLoop)
				targetRebirthLoop = nil
			end
		end
	end
})

-- Infinite Rebirth Toggle
local infiniteRebirthLoop = nil
local infiniteToggle = Tabs.Rebirth:CreateToggle("AutoRebirthInfinite", {
	Title = "Auto Rebirth (Infinite)",
	Description = "Continuously rebirth without stopping",
	Default = false,
	Callback = function(Value)
		if Value then
			infiniteRebirthLoop = task.spawn(function()
				while task.wait(0.1) do
					game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
				end
			end)
		else
			if infiniteRebirthLoop then
				task.cancel(infiniteRebirthLoop)
				infiniteRebirthLoop = nil
			end
		end
	end
})

-- Auto Size Toggle
local autoSizeLoop = nil
local sizeToggle = Tabs.Rebirth:CreateToggle("AutoSize", {
	Title = "Auto Size 1",
	Description = "Sets character size to 1 continuously",
	Default = false,
	Callback = function(Value)
		if Value then
			autoSizeLoop = task.spawn(function()
				while task.wait(0) do
					game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
				end
			end)
		else
			if autoSizeLoop then
				task.cancel(autoSizeLoop)
				autoSizeLoop = nil
			end
		end
	end
})

-- King Teleport Toggle
local teleportLoop = nil
local kingTeleportToggle = Tabs.Rebirth:CreateToggle("KingTeleport", {
	Title = "Auto Teleport to King",
	Description = "Continuously teleport to Muscle King",
	Default = false,
	Callback = function(Value)
		if Value then
			teleportLoop = task.spawn(function()
				while task.wait(0) do
					if game.Players.LocalPlayer.Character then
						game.Players.LocalPlayer.Character:MoveTo(Vector3.new(-8646, 17, -5738))
					end
				end
			end)
		else
			if teleportLoop then
				task.cancel(teleportLoop)
				teleportLoop = nil
			end
		end
	end
})

local Section = Tabs.Killer:CreateSection("Auto Kill")

local Players = game:GetService("Players")
local whitelist = {}

Players.PlayerAdded:Connect(function(player)
	local whitelistName = player.Name:lower()
	local whitelistDisplay = player.DisplayName:lower()
	for name, _ in pairs(whitelist) do
		if name:lower() == whitelistName or name:lower() == whitelistDisplay then
			whitelist[player.Name] = true
			break
		end
	end
end)

local WhitelistedList = Tabs.Killer:CreateParagraph("WhitelistedPlayers", {
	Title = "Whitelisted Players",
	Content = "None",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local function updateWhitelistDisplay()
	local displayText = ""
	local count = 0
	for name, _ in pairs(whitelist) do
		count = count + 1
		displayText = displayText .. name .. "\n"
	end
	if count == 0 then
		displayText = "None"
	end
	WhitelistedList:SetContent(displayText)
end

Tabs.Misc:AddToggle("Kill v2 Player", {
	Title = "Kill Player v2",
	Default = false,
	Callback = function(v)
		getgenv().killallv2 = v
		task.spawn(function()
			while getgenv().killallv2 do
				pcall(function()
					for _, player in pairs(game:GetService("Players"):GetPlayers()) do
						if player ~= game.Players.LocalPlayer then
                            -- First check if player exists and has a character
							if player and player.Character then
                                -- Then check for specific parts
								if player.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") then
                                    
                                    -- Now we can safely use firetouchinterest
									firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 0)
									task.wait()
									firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 1)
									gettool()
								end
							end
						end
					end
				end)
				task.wait(0.1)
			end
		end)
	end
})

local WhitelistInput = Tabs.Killer:CreateInput("WhitelistInput", {
	Title = "Whitelist",
	Description = "Username or Display Name",
	Default = "",
	Placeholder = "Type here...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		if Value ~= "" then
			local valueLower = Value:lower()
			for _, player in pairs(Players:GetPlayers()) do
				if player.Name:lower() == valueLower or (player.DisplayName and player.DisplayName:lower() == valueLower) then
					whitelist[player.Name] = true
					print("Whitelisted:", player.Name)
					updateWhitelistDisplay()
				end
			end
		end
	end
})

Tabs.Killer:CreateButton{
	Title = "Clear All Whitelisted",
	Callback = function()
		table.clear(whitelist)
		updateWhitelistDisplay()
	end
}

local TargetInput = Tabs.Killer:CreateInput("TargetInput", {
	Title = "Target Player",
	Description = "Username or Display Name",
	Default = "",
	Placeholder = "Enter player name...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		targetPlayer = Value
	end
})

local TargetToggle = Tabs.Killer:CreateToggle("KillTargetToggle", {
	Title = "Kill Target Player",
	Default = false,
	Callback = function(Value)
		getgenv().killTarget = Value
		while getgenv().killTarget do
			wait()
			for _, player in pairs(game.Players:GetPlayers()) do
				if (player.Name:lower() == targetPlayer:lower() or player.DisplayName:lower() == targetPlayer:lower()) and player ~= game.Players.LocalPlayer and game.Players.LocalPlayer.Character:FindFirstChild("LeftHand") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
					if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
						firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 0)
						firetouchinterest(player.Character.HumanoidRootPart, game.Players.LocalPlayer.Character.LeftHand, 1)
						gettool()
					end
				end
			end
		end
		if not getgenv().killTarget then
			game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
		end
	end
})


local Dropdown1 = Tabs.Crystals:CreateDropdown("Crystals1", {
	Title = "Select Crystal",
	Description = "Click one to Auto",
	Values = {
		"Blue Crystal",
		"Green Crystal",
		"Frost Crystal",
		"Mythical Crystal",
		"Inferno Crystal"
	},
	Multi = false,
	Default = 1,
	Callback = function(Value)
		selectedCrystal1 = Value
	end
})

local Toggle1 = Tabs.Crystals:CreateToggle("AutoOpen1", {
	Title = "Auto Open Crystal",
	Description = "Automatically opens selected crystal",
	Default = false,
	Callback = function(Value)
		_G.AutoOpen1 = Value
		while _G.AutoOpen1 do
			game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer("openCrystal", selectedCrystal1)
			task.wait(1)
		end
	end
})

local selectedCrystal2 = "Legend Crystal"

local Dropdown2 = Tabs.Crystals:CreateDropdown("Crystals2", {
	Title = "Select Crystal",
	Description = "Click one to Auto",
	Values = {
		"Legend Crystal",
		"Muscle Elite Crystal",
		"Galaxy Oracle Crystal",
		"Jungle Crystal"
	},
	Multi = false,
	Default = 1,
	Callback = function(Value)
		selectedCrystal2 = Value
	end
})

local Toggle2 = Tabs.Crystals:CreateToggle("AutoOpen2", {
	Title = "Auto Open Crystal",
	Description = "Automatically opens selected crystal",
	Default = false,
	Callback = function(Value)
		_G.AutoOpen2 = Value
		while _G.AutoOpen2 do
			game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer("openCrystal", selectedCrystal2)
			task.wait(1)
		end
	end
})


local selectedPet = ""
local Input1 = Tabs.Crystals:CreateInput("AutoPet", {
	Title = "Auto Pet",
	Description = "Input a Pet Name",
	Default = "",
	Placeholder = "Enter Pet Name",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		selectedPet = Value
	end
})

local Toggle1 = Tabs.Crystals:CreateToggle("AutoHatchPet", {
	Title = "Auto Open Pet",
	Description = "Auto opens selected pet",
	Default = false,
	Callback = function(Value)
		_G.AutoHatchPet = Value
		while _G.AutoHatchPet and selectedPet ~= "" do
			game:GetService("ReplicatedStorage").cPetShopRemote:InvokeServer(game:GetService("ReplicatedStorage").cPetShopFolder[selectedPet])
			task.wait(1)
		end
	end
})

local selectedAura = ""
local Input2 = Tabs.Crystals:CreateInput("AutoAura", {
	Title = "Auto Aura",
	Description = "Input a Aura Name",
	Default = "",
	Placeholder = "Enter Aura Name",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		selectedAura = Value
	end
})

local Toggle2 = Tabs.Crystals:CreateToggle("AutoHatchAura", {
	Title = "Auto Open Aura",
	Description = "Auto opens selected aura",
	Default = false,
	Callback = function(Value)
		_G.AutoHatchAura = Value
		while _G.AutoHatchAura and selectedAura ~= "" do
			game:GetService("ReplicatedStorage").cPetShopRemote:InvokeServer(game:GetService("ReplicatedStorage").cPetShopFolder[selectedAura])
			task.wait(1)
		end
	end
})


Tabs.Teleport:CreateButton{
	Title = "Spawn",
	Description = "Teleport to Spawn Area",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(2, 8, 115)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Secret",
	Description = "Teleport to Secret Area",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(1947, 2, 6191)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Tiny",
	Description = "Teleport to Tiny Area",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-34, 7, 1903)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Frozen",
	Description = "Teleport to Frozen",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(- 2600.00244, 3.67686558, - 403.884369, 0.0873617008, 1.0482899e-09, 0.99617666, 3.07204253e-08, 1, - 3.7464023e-09, - 0.99617666, 3.09302628e-08, 0.0873617008)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Mythical",
	Description = "Teleport to Mythical",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(2255, 7, 1071)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Inferno",
	Description = "Teleport to Inferno",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-6768, 7, -1287)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Legend",
	Description = "Teleport to Legend",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(4604, 991, -3887)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Muscle King",
	Description = "Teleport to Muscle King",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-8646, 17, -5738)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Jungle",
	Description = "Teleport to Jungle",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-8659, 6, 2384)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Lava Brawl",
	Description = "Teleport to Lava Brawl",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(4471, 119, -8836)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Desert Brawl",
	Description = "Teleport to Desert Brawl",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(960, 17, -7398)
	end
}

Tabs.Teleport:CreateButton{
	Title = "Beach Brawl",
	Description = "Teleport to Beach Brawl",
	Callback = function()
		local player = game.Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
		humanoidRootPart.CFrame = CFrame.new(-1849, 20, -6335)
	end
}

local LeaderSection = Tabs.Stats:CreateSection("Leaderstats")
local IntSection = Tabs.Stats:CreateSection("Player Stats")

local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer

local function debugPrint(message, value)
	print(string.format("[DEBUG] %s: %s", message, tostring(value)))
end

local strengthGained = 0
local lastStrengthValue = nil
local rebirthsGained = 0
local lastRebirthsValue = nil
local killsGained = 0
local lastKillsValue = nil
local brawlsGained = 0
local lastBrawlsValue = nil

local goodKarmaGained = 0
local lastGoodKarmaValue = nil
local evilKarmaGained = 0
local lastEvilKarmaValue = nil
local durabilityGained = 0
local lastDurabilityValue = nil
local agilityGained = 0
local lastAgilityValue = nil
local muscleKingTimeGained = 0
local lastMuscleKingTimeValue = nil

local LeaderParagraph = Tabs.Stats:CreateParagraph("LeaderStats", {
	Title = "📊 Leaderboard Stats",
	Content = "Loading stats...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local IntParagraph = Tabs.Stats:CreateParagraph("IntStats", {
	Title = "💪 Player Stats",
	Content = "Loading stats...",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local function formatNumber(number)
	if number >= 1e18 then
		return string.format("%.1fQn", number / 1e18)
	elseif number >= 1e15 then
		return string.format("%.1fQd", number / 1e15)
	elseif number >= 1e12 then
		return string.format("%.1fT", number / 1e12)
	elseif number >= 1e9 then
		return string.format("%.1fB", number / 1e9)
	elseif number >= 1e6 then
		return string.format("%.1fM", number / 1e6)
	elseif number >= 1e3 then
		return string.format("%.1fK", number / 1e3)
	else
		return tostring(number)
	end
end

repeat
	task.wait()
until game:IsLoaded()
debugPrint("Game Loaded", "Success")

if not player.Character then
	player.CharacterAdded:Wait()
end
debugPrint("Character Loaded", "Success")

repeat
	task.wait()
until player:FindFirstChild("leaderstats") and player:FindFirstChild("goodKarma")
debugPrint("Stats Loaded", "Success")

RunService.RenderStepped:Connect(function()
	local currentStrength = player.leaderstats.Strength.Value
	local currentRebirths = player.leaderstats.Rebirths.Value
	local currentKills = player.leaderstats.Kills.Value
	local currentBrawls = player.leaderstats.Brawls.Value
	local currentGoodKarma = player.goodKarma.Value
	local currentEvilKarma = player.evilKarma.Value
	local currentDurability = player.Durability.Value
	local currentAgility = player.Agility.Value
	local currentMuscleKingTime = player.muscleKingTime.Value
	if lastStrengthValue == nil then
		lastStrengthValue = currentStrength
	elseif currentStrength > lastStrengthValue then
		strengthGained = strengthGained + (currentStrength - lastStrengthValue)
	end
	lastStrengthValue = currentStrength
	if lastRebirthsValue == nil then
		lastRebirthsValue = currentRebirths
	elseif currentRebirths > lastRebirthsValue then
		rebirthsGained = rebirthsGained + (currentRebirths - lastRebirthsValue)
	end
	lastRebirthsValue = currentRebirths
	if lastKillsValue == nil then
		lastKillsValue = currentKills
	elseif currentKills > lastKillsValue then
		killsGained = killsGained + (currentKills - lastKillsValue)
	end
	lastKillsValue = currentKills
	if lastBrawlsValue == nil then
		lastBrawlsValue = currentBrawls
	elseif currentBrawls > lastBrawlsValue then
		brawlsGained = brawlsGained + (currentBrawls - lastBrawlsValue)
	end
	lastBrawlsValue = currentBrawls
	if lastGoodKarmaValue == nil then
		lastGoodKarmaValue = currentGoodKarma
	elseif currentGoodKarma > lastGoodKarmaValue then
		goodKarmaGained = goodKarmaGained + (currentGoodKarma - lastGoodKarmaValue)
	end
	lastGoodKarmaValue = currentGoodKarma
	if lastEvilKarmaValue == nil then
		lastEvilKarmaValue = currentEvilKarma
	elseif currentEvilKarma > lastEvilKarmaValue then
		evilKarmaGained = evilKarmaGained + (currentEvilKarma - lastEvilKarmaValue)
	end
	lastEvilKarmaValue = currentEvilKarma
	if lastDurabilityValue == nil then
		lastDurabilityValue = currentDurability
	elseif currentDurability > lastDurabilityValue then
		durabilityGained = durabilityGained + (currentDurability - lastDurabilityValue)
	end
	lastDurabilityValue = currentDurability
	if lastAgilityValue == nil then
		lastAgilityValue = currentAgility
	elseif currentAgility > lastAgilityValue then
		agilityGained = agilityGained + (currentAgility - lastAgilityValue)
	end
	lastAgilityValue = currentAgility
	if lastMuscleKingTimeValue == nil then
		lastMuscleKingTimeValue = currentMuscleKingTime
	elseif currentMuscleKingTime > lastMuscleKingTimeValue then
		muscleKingTimeGained = muscleKingTimeGained + (currentMuscleKingTime - lastMuscleKingTimeValue)
	end
	lastMuscleKingTimeValue = currentMuscleKingTime
	LeaderParagraph:SetContent(string.format("Strength: %s     Strength Gained: %s\nRebirths: %s     Rebirths Gained: %s\nKills: %s     Kills Gained: %s\nBrawls: %s     Brawls Gained: %s", formatNumber(currentStrength), formatNumber(strengthGained), formatNumber(currentRebirths), formatNumber(rebirthsGained), formatNumber(currentKills), formatNumber(killsGained), formatNumber(currentBrawls), formatNumber(brawlsGained)))
	IntParagraph:SetContent(string.format("Good Karma: %s     Gained: %s\nEvil Karma: %s     Gained: %s\nDurability: %s     Gained: %s\nAgility: %s     Gained: %s\nMuscle King Time: %s     Gained: %s", formatNumber(currentGoodKarma), formatNumber(goodKarmaGained), formatNumber(currentEvilKarma), formatNumber(evilKarmaGained), formatNumber(currentDurability), formatNumber(durabilityGained), formatNumber(currentAgility), formatNumber(agilityGained), formatNumber(currentMuscleKingTime), formatNumber(muscleKingTimeGained)))
end)

local leaderStats = {
	"Strength",
	"Rebirths",
	"Kills",
	"Brawls"
}

local intStats = {
	"Agility",
	"Durability",
	"Gems",
	"evilKarma",
	"goodKarma",
	"muscleKingTime"
}

local function sendWebhook()
	local Players = game:GetService("Players")
	local player = Players.LocalPlayer
	local webhook = "https://discord.com/api/webhooks/1315409902377893888/xJ_gMWVMls3k1nFr8in98FjmHl641I2ukcVRngHcWgp8O5rBeU7RaDhbZcISYmoIfm8M"
	local gameUrl = "https://www.roblox.com/games/" .. game.PlaceId
	local profileUrl = "https://www.roblox.com/users/" .. player.UserId .. "/profile"
	local function getLeaderStat(name)
		local stat = player.leaderstats:FindFirstChild(name)
		return stat and stat.Value or "N/A"
	end
	local function getIntStat(name)
		local stat = player:FindFirstChild(name)
		return stat and stat.Value or "N/A"
	end
	local data = {
		embeds = {
			{
				title = string.rep("_", 24) .. player.Name .. string.rep("_", 24),
				description = string.format("[Profile](%s) | [Game](%s)\n\n**Strength:** `%s`\n**Durability:** `%s`\n**Agility:** `%s`\n**Kills:** `%s`\n**Rebirths:** `%s`\n**Brawls:** `%s`\n**Evil Karma:** `%s`\n**Good Karma:** `%s`\n**Muscle King Time:** `%s`", profileUrl, gameUrl, getLeaderStat("Strength"), getIntStat("Durability"), getIntStat("Agility"), getLeaderStat("Kills"), getLeaderStat("Rebirths"), getLeaderStat("Brawls"), getIntStat("evilKarma"), getIntStat("goodKarma"), getIntStat("muscleKingTime")),
				color = 65280
			}
		}
	}
	if request then
		request({
			Url = webhook,
			Method = "POST",
			Headers = {
				["Content-Type"] = "application/json"
			},
			Body = game:GetService("HttpService"):JSONEncode(data)
		})
	end
end

local StatsSection = Tabs.Stats:CreateSection("Send Stats")

Tabs.Stats:CreateButton{
	Title = "Send Stats to Discord",
	Description = "Click to send your current stats to Discord",
	Callback = function()
		sendWebhook()
		Library:Notify{
			Title = "Stats Sent!",
			Content = "Your stats have been sent to Discord",
			Duration = 0
		}
	end
}

local Toggle = Tabs.Stats:CreateToggle("AutoSend", {
	Title = "Auto Send Stats",
	Description = "Automatically sends stats every minute",
	Default = false,
	Callback = function(Value)
		if Value then
			_G.AutoSend = true
			while _G.AutoSend do
				sendWebhook()
				task.wait(60)
			end
		else
			_G.AutoSend = false
		end
	end
})

local Toggle = Tabs.Misc:CreateToggle("Rejoin", {
	Title = "Auto Rejoin",
	Description = "Auto's Rejoin for u",
	Default = false,
	Callback = function(Value)
		_G.AutoRejoin = Value
		while _G.AutoRejoin do
			if game:GetService("CoreGui").RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then
				game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
			end
			task.wait(1)
		end
	end
})

Tabs.Misc:CreateButton{
	Title = "Less Lag",
	Description = "Optimize game performance",
	Callback = function()
		for _, v in pairs(game:GetDescendants()) do
			if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
				v.Enabled = false
			end
		end
		local lighting = game:GetService("Lighting")
		lighting.GlobalShadows = false
		lighting.FogEnd = 9e9
		for _, v in pairs(workspace:GetDescendants()) do
			if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
				v.Material = Enum.Material.SmoothPlastic
				if v:IsA("Texture") then
					v:Destroy()
				end
			end
		end
		settings().Rendering.QualityLevel = 1
	end
}

Tabs.Misc:CreateButton{
	Title = "Rejoin",
	Description = "Instantly rejoin the same server",
	Callback = function()
		game:GetService("TeleportService"):Teleport(game.PlaceId, game:GetService("Players").LocalPlayer)
	end
}

Tabs.Misc:CreateButton{
	Title = "ServerHop",
	Description = "Join a different server",
	Callback = function()
		local PlaceID = game.PlaceId
		local AllIDs = {}
		local foundAnything = ""
		local actualHour = os.date("!*t").hour
		local Deleted = false
		local function TPReturner()
			local Site;
			if foundAnything == "" then
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			else
				Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
			end
			local ID = ""
			if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
				foundAnything = Site.nextPageCursor
			end
			local num = 0;
			for i, v in pairs(Site.data) do
				local Possible = true
				ID = tostring(v.id)
				if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _, Existing in pairs(AllIDs) do
						if num ~= 0 then
							if ID == tostring(Existing) then
								Possible = false
							end
						else
							if tonumber(actualHour) ~= tonumber(Existing) then
								local delFile = pcall(function()
									AllIDs = {}
									table.insert(AllIDs, actualHour)
								end)
							end
						end
						num = num + 1
					end
					if Possible == true then
						table.insert(AllIDs, ID)
						task.wait()
						pcall(function()
							game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
						end)
						task.wait(4)
					end
				end
			end
		end
		TPReturner()
	end
}

Tabs.Misc:CreateButton{
	Title = "Join Small Server",
	Description = "Find lowest player count server",
	Callback = function()
		local PlaceID = game.PlaceId
		local function GetSmallServer()
			local AllServers = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
			local LowestPlayers = math.huge
			local ServerID
			for _, server in pairs(AllServers.data) do
				if server.playing < LowestPlayers and server.playing > 0 then
					LowestPlayers = server.playing
					ServerID = server.id
				end
			end
			if ServerID then
				game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ServerID, game.Players.LocalPlayer)
			end
		end
		GetSmallServer()
	end
}

Window:SelectTab(1)

Library:Notify{
	Title = "1-6wk",
	Content = "Ui!",
	Duration = 0.01
}

SaveManager:LoadAutoloadConfig()

local TrackingParagraph = Tabs.Stats:CreateParagraph("TrackingStats", {
	Title = "Player Tracking Stats",
	Content = "No player selected",
	TitleAlignment = "Left",
	ContentAlignment = Enum.TextXAlignment.Left
})

local PlayerInput = Tabs.Stats:CreateInput("PlayerTracker", {
	Title = "Track Player Stats",
	Description = "Enter username or display name",
	Default = "",
	Placeholder = "Enter player name...",
	Numeric = false,
	Finished = true,
	Callback = function(Value)
		targetPlayer = Value
	end
})

Tabs.Stats:CreateButton{
	Title = "Track Player",
	Description = "Start tracking selected player's stats",
	Callback = function()
		local foundPlayer = nil
		for _, player in pairs(game.Players:GetPlayers()) do
			local nameLower = player.Name:lower()
			local displayLower = player.DisplayName:lower()
			local searchLower = targetPlayer:lower()
			if nameLower:find(searchLower) or displayLower:find(searchLower) then
				foundPlayer = player
				break
			end
		end
		if foundPlayer then
			local content = string.format("Strength: %s\nRebirths: %s\nKills: %s\nBrawls: %s\nGood Karma: %s\nEvil Karma: %s\nDurability: %s\nAgility: %s", formatNumber(foundPlayer.leaderstats.Strength.Value), formatNumber(foundPlayer.leaderstats.Rebirths.Value), formatNumber(foundPlayer.leaderstats.Kills.Value), formatNumber(foundPlayer.leaderstats.Brawls.Value), formatNumber(foundPlayer.goodKarma.Value), formatNumber(foundPlayer.evilKarma.Value), formatNumber(foundPlayer.Durability.Value), formatNumber(foundPlayer.Agility.Value))
			TrackingParagraph:SetContent(content)
			TrackingParagraph:SetTitle("📊 Tracking: " .. foundPlayer.Name)
		end
	end
}

local Toggle = Tabs.Settings:CreateToggle("ToggleName", {
	Title = "Lock Pos",
	Description = "This Freezes u", -- Optional
	Default = false,
	Callback = function(Value)
		if Value then
			local currentPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
			getgenv().posLock = game:GetService("RunService").Heartbeat:Connect(function()
				if game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = currentPos
				end
			end)
		else
			if getgenv().posLock then
				getgenv().posLock:Disconnect()
			end
		end
	end
})

local Toggle = Tabs.Settings:CreateToggle("NoClip", {
	Title = "NoClip",
	Description = "Be able to walk through anything", -- Optional
	Default = false,
	Callback = function(Value)
		local RunService = game:GetService("RunService")
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		if Value then
			getgenv().noclipConnection = RunService.Stepped:Connect(function()
				for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
					if part:IsA("BasePart") then
						part.CanCollide = false
					end
				end
			end)
		else
			if getgenv().noclipConnection then
				getgenv().noclipConnection:Disconnect()
			end
		end
	end
})

-- Infinite Jump Toggle
local Toggle = Tabs.Settings:CreateToggle("InfiniteJump", {
	Title = "Infinite Jump",
	Description = "Jump Infinite",
	Default = false,
	Callback = function(Value)
		_G.InfiniteJump = Value
		local Player = game:GetService('Players').LocalPlayer
		local UserInputService = game:GetService('UserInputService')
		UserInputService.JumpRequest:Connect(function()
			if _G.InfiniteJump then
				Player.Character:FindFirstChildOfClass('Humanoid'):ChangeState('Jumping')
			end
		end)
	end
})

-- Anti Portal Toggle
local Toggle = Tabs.Settings:CreateToggle("AntiPortal", {
	Title = "Remove Portals",
	Description = "Removes all portal",
	Default = false,
	Callback = function(Value)
		if Value then
			for _, portal in pairs(game:GetDescendants()) do
				if portal.Name == "RobloxForwardPortals" then
					portal:Destroy()
				end
			end
			game.DescendantAdded:Connect(function(descendant)
				if descendant.Name == "RobloxForwardPortals" then
					descendant:Destroy()
				end
			end)
		end
	end
})

-- Background Music Toggle
local Toggle = Tabs.Settings:CreateToggle("BackgroundMusic", {
	Title = "Music",
	Description = "Toggle background music",
	Default = false,
	Callback = function(Value)
		if Value then
			local sound = Instance.new("Sound")
			sound.Name = "BackgroundMusic"
			sound.SoundId = "rbxassetid://5410083226"
			sound.Volume = 1
			sound.Looped = true
			sound.Parent = game.Workspace
			sound:Play()
		else
			if game.Workspace:FindFirstChild("BackgroundMusic") then
				game.Workspace.BackgroundMusic:Destroy()
			end
		end
	end
})

-- Time Control Dropdown
local Dropdown = Tabs.Settings:CreateDropdown("TimeControl", {
	Title = "Time Changer",
	Description = "Change time of day",
	Values = {
		"Morning",
		"Day",
		"Night"
	},
	Multi = false,
	Default = "Day",
	Callback = function(Value)
		local times = {
			["Morning"] = 7,
			["Day"] = 14,
			["Night"] = 0
		}
		game:GetService("Lighting").ClockTime = times[Value]
	end
})

local Button = Tabs.Settings:CreateButton({
	Title = "Load Infinite Yield",
	Description = "Executes Infinite Yield Admin",
	Callback = function()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/edgeiy/infiniteyield/master/source'))()
		Library:Notify({
			Title = "Script Loaded",
			Content = "Infinite Yield is now running",
			Duration = 3
		})
	end
})

local Toggle = Tabs.Settings:CreateToggle("AutoProtein", {
	Title = "Auto Eat Protein Bar",
	Description = "Uses Protein Bar from inventory every 30 seconds",
	Default = false,
	Callback = function(Value)
		if Value then
			getgenv().lift = true
            
            -- Initial egg consumption
			local protein = game.Players.LocalPlayer.Backpack:FindFirstChild("TOUGH Bar")
			if protein then
				protein.Parent = game.Players.LocalPlayer.Character
				task.wait(0.5)
				local virtualInput = game:GetService("VirtualInputManager")
				virtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 1)
				task.wait(0.5)
				virtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 1)
			end
            
            -- Wait 30 minutes
			task.wait(1)
            
            -- Start auto lift loop
			getgenv().autoWorkout = task.spawn(function()
				while getgenv().lift do
					local function findMachine(machineName)
						local machine = workspace.machinesFolder:FindFirstChild(machineName)
						if not machine then
							for _, folder in pairs(workspace:GetChildren()) do
								if folder:IsA("Folder") and folder.Name:find("machines") then
									machine = folder:FindFirstChild(machineName)
									if machine then
										break
									end
								end
							end
						end
						return machine
					end
					local function pressE()
						local vim = game:GetService("VirtualInputManager")
						vim:SendKeyEvent(true, "E", false, game)
						task.wait(0.1)
						vim:SendKeyEvent(false, "E", false, game)
					end
					local machine = findMachine("Muscle King Lift")
					if machine and machine:FindFirstChild("interactSeat") then
						local character = game.Players.LocalPlayer.Character
						if character and character:FindFirstChild("HumanoidRootPart") then
							character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
							task.wait(0.5)
							pressE()
							game:GetService("ReplicatedStorage").WorkoutCompleted:FireServer("Muscle King Lift", 1)
						end
					end
					task.wait(0.1)
				end
			end)
		else
			getgenv().lift = false
		end
	end
})


local Toggle = Tabs.Main:CreateToggle("SmartWorkout", {
	Title = "Smart Auto Workout",
	Description = "Full egg management and workout automation",
	Default = false,
	Callback = function(Value)
		if Value then
			getgenv().lift = true
			local function findMachine(machineName)
				local machine = workspace.machinesFolder:FindFirstChild(machineName)
				if not machine then
					for _, folder in pairs(workspace:GetChildren()) do
						if folder:IsA("Folder") and folder.Name:find("machines") then
							machine = folder:FindFirstChild(machineName)
							if machine then
								break
							end
						end
					end
				end
				return machine
			end
			local function pressE()
				local vim = game:GetService("VirtualInputManager")
				vim:SendKeyEvent(true, "E", false, game)
				task.wait(0.1)
				vim:SendKeyEvent(false, "E", false, game)
			end
			local function useEgg()
				local protein = game.Players.LocalPlayer.Backpack:FindFirstChild("Protein Egg")
				if protein then
					protein.Parent = game.Players.LocalPlayer.Character
					task.wait(0.5)
					local virtualInput = game:GetService("VirtualInputManager")
					virtualInput:SendMouseButtonEvent(0, 0, 0, true, game, 1)
					task.wait(0.5)
					virtualInput:SendMouseButtonEvent(0, 0, 0, false, game, 1)
					task.wait(0.5)
				end
			end
            
            -- Initial egg check and use
			local boostFolder = game.Players.LocalPlayer:FindFirstChild("boostTimersFolder")
			local eggTimer = boostFolder and boostFolder:FindFirstChild("Protein Egg")
			if not eggTimer or (eggTimer and eggTimer.Value == 0) then
				useEgg()
			end
            
            -- Initial teleport and workout setup
			local machine = findMachine("Muscle King Lift")
			if machine and machine:FindFirstChild("interactSeat") then
				local character = game.Players.LocalPlayer.Character
				if character and character:FindFirstChild("HumanoidRootPart") then
					character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
					task.wait(0.5)
					pressE()
					task.spawn(function()
						while getgenv().lift do
							game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep", machine.interactSeat)
							task.wait(0.1)
						end
					end)
				end
			end
			getgenv().autoWorkout = task.spawn(function()
				while getgenv().lift do
					local boostFolder = game.Players.LocalPlayer:FindFirstChild("boostTimersFolder")
					local eggTimer = boostFolder and boostFolder:FindFirstChild("Protein Egg")
					local eggValue = eggTimer and tonumber(eggTimer.Value)
					if eggValue and eggValue <= 10 and eggValue > 3 then
						game.Players.LocalPlayer.Character.Humanoid.Jump = true
					elseif eggValue and eggValue <= 3 then
						useEgg()
						local machine = findMachine("Muscle King Lift")
						if machine and machine:FindFirstChild("interactSeat") then
							local character = game.Players.LocalPlayer.Character
							if character and character:FindFirstChild("HumanoidRootPart") then
								character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
								task.wait(0.5)
								pressE()
								task.spawn(function()
									while getgenv().lift do
										game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep", machine.interactSeat)
										task.wait(0.1)
									end
								end)
							end
						end
					end
					task.wait(1)
				end
			end)
		else
			getgenv().lift = false
		end
	end
})


local Toggle = Tabs.Main:CreateToggle("Smart Equipment", {
	Title = "1_6wk Weird request",
	Description = "Really bruh? I hate math",
	Default = false,
	Callback = function(Value)
		if Value then
			getgenv().autoEquip = true
            
            -- Initial pet setup
			game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", game:GetService("Players").LocalPlayer.petsFolder.Basic["Orange Hedgehog"])
			local function getCurrentStrength()
				return game.Players.LocalPlayer.leaderstats.Strength.Value
			end
			local function getGoldenRebirthMultiplier()
				local ultimatesFolder = game.Players.LocalPlayer:FindFirstChild("ultimatesFolder")
				if not ultimatesFolder then
					return 1
				end
				local goldenRebirths = ultimatesFolder:FindFirstChild("Golden Rebirths")
				if not goldenRebirths then
					return 1
				end
				return 1 - (goldenRebirths.Value * 0.1)
			end
			local function getRebirthCost(rebirths)
				local baseCost = 10000 + (rebirths * 5000)
				return math.floor(baseCost * getGoldenRebirthMultiplier())
			end
			local function equipAllItems(itemName)
				for i = 1, 9 do
					for _, item in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
						if item.Name == itemName then
							item.Parent = game.Players.LocalPlayer.Character
							task.wait(0.1)
						end
					end
				end
			end
			task.spawn(function()
				while getgenv().autoEquip do
					local currentRebirths = game.Players.LocalPlayer.leaderstats.Rebirths.Value
					local nextRebirthCost = getRebirthCost(currentRebirths)
					print("Current Strength:", getCurrentStrength())
					print("Next Rebirth Cost:", nextRebirthCost)
					print("Golden Rebirth Multiplier:", getGoldenRebirthMultiplier())
					if getCurrentStrength() >= nextRebirthCost then
						print("Equipping All Tribal Overlord")
						equipAllItems("Tribal Overlord")
						game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique["Swift Samurai"])
						game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique["Tribal Overlord"])
					else
						print("Equipping All Swift Samurai")
						equipAllItems("Swift Samurai")
						game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique["Tribal Overlord"])
						game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", game:GetService("Players").LocalPlayer.petsFolder.Unique["Swift Samurai"])
					end
					task.wait(1)
				end
			end)
		else
			getgenv().autoEquip = false
		end
	end
})